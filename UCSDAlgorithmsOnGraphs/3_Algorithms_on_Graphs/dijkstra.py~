#!/usr/bin/python3

"""
Dijkstra's Algorithm

Best implementation (style, function, runtime) here:

~/Desktop/Coursera/StanfordAlgorithms/AllPairsJohnson's.py
"""

import sys

def distance(adj, cost, s, t):
    
    INF = 99999
    prev = [None for i in range(len(adj))]
    found = [False]*len(adj)
    dists = [INF]*len(adj)
    dists[s] = 0

    while sum(found) != len(adj):
        v = dists.index(max(dists))
        for i in range(len(dists)):
            if not found[i] and dists[i] <= dists[v]:
                v = i
        # v is now min with shortest-path guarantee that hasn't broadcast it yet
        if v == t:
            break
        found[v] = True
        for i in range(len(adj[v])):
            n = adj[v][i]
            if dists[n] > dists[v] + cost[v][i]:
                dists[n] = dists[v] + cost[v][i]
                prev[n] = v

    if dists[t] == INF:
        return -1
    else:
        return dists[t]

"""
The Djikstra w/ dict implementation for ~/Desktop/Coursera/StanfordAlgorithms/Dijkstra.py
Different organization of adj

def Dijkstra(adj, start):

    INF = 99999999
    nodes = list(adj.keys())
    N = len(nodes)

    #prev = {i = None for i in nodes}
    visited = {i: None for i in nodes}
    dists = {i: INF for i in nodes}

    dists[start] = 0
    visited_count = 0

    while visited_count < N:
        v = max(dists, key=dists.get)
        for i in nodes:
            if not visited[i] and dists[i] <= dists[v]:
                v = i
        # v is now min with shortest-path guarantee that hasn't broadcast it yet
        visited[v] = True
        visited_count += 1
        for i in range(len(adj[v])):
            n, cost = adj[v][i][0], int(adj[v][i][1])
            if dists[n] > dists[v] + cost:
                dists[n] = dists[v] + cost
                #prev[n] = v

    for i in nodes:
        dists[i] = -1 if dists[i] == INF else dists[i]

    return dists
"""


if __name__ == '__main__':
    input = sys.stdin.read()
    data = list(map(int, input.split()))
    n, m = data[0:2]
    data = data[2:]
    edges = list(zip(zip(data[0:(3 * m):3], data[1:(3 * m):3]), data[2:(3 * m):3]))
    data = data[3 * m:]
    adj = [[] for _ in range(n)]
    cost = [[] for _ in range(n)]
    for ((a, b), w) in edges:
        adj[a - 1].append(b - 1)
        cost[a - 1].append(w)
    s, t = data[0] - 1, data[1] - 1
    print(distance(adj, cost, s, t))
